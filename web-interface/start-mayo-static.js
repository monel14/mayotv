#!/usr/bin/env node

/**
 * Script de d√©marrage simplifi√© pour MAYO TV avec fichiers statiques
 * Lance uniquement un serveur web statique - pas de serveur Node.js pour les donn√©es
 */

const http = require('http');
const fs = require('fs');
const path = require('path');

console.log('üöÄ D√©marrage de MAYO TV en mode fichiers statiques...\n');

// V√©rifier que les donn√©es sont copi√©es
const dataDir = path.join(__dirname, 'data');
if (!fs.existsSync(dataDir)) {
  console.log('üìã Copie des donn√©es JSON...');
  require('./copy-data.js');
  console.log('');
}

// Cr√©er le serveur web statique
const server = http.createServer((req, res) => {
  let filePath = path.join(__dirname, req.url === '/' ? '/index.html' : req.url);
  const extname = path.extname(filePath).toLowerCase();
  
  const contentTypes = {
    '.html': 'text/html; charset=utf-8',
    '.js': 'application/javascript; charset=utf-8',
    '.css': 'text/css; charset=utf-8',
    '.json': 'application/json; charset=utf-8',
    '.svg': 'image/svg+xml',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.ico': 'image/x-icon'
  };
  
  const contentType = contentTypes[extname] || 'text/plain; charset=utf-8';
  
  fs.readFile(filePath, (err, content) => {
    if (err) {
      if (err.code === 'ENOENT') {
        res.writeHead(404, { 
          'Content-Type': 'text/html; charset=utf-8',
          'Access-Control-Allow-Origin': '*'
        });
        res.end(`
          <h1>404 - Fichier non trouv√©</h1>
          <p>Chemin: ${filePath}</p>
          <p><a href="/">Retour √† l'accueil</a></p>
        `);
      } else {
        res.writeHead(500, { 
          'Content-Type': 'text/plain; charset=utf-8',
          'Access-Control-Allow-Origin': '*'
        });
        res.end('Erreur serveur: ' + err.code);
      }
    } else {
      res.writeHead(200, { 
        'Content-Type': contentType,
        'Access-Control-Allow-Origin': '*',
        'Cache-Control': extname === '.json' ? 'no-cache' : 'public, max-age=3600'
      });
      res.end(content);
    }
  });
});

const PORT = process.env.PORT || 3003;
server.listen(PORT, () => {
  console.log('üéâ MAYO TV est pr√™t en mode statique !');
  console.log(`üåê Interface web: http://localhost:${PORT}`);
  console.log('\n‚ú® Avantages du mode statique:');
  console.log('   ‚Ä¢ Pas de serveur Node.js requis pour les donn√©es');
  console.log('   ‚Ä¢ Fichiers JSON servis directement');
  console.log('   ‚Ä¢ D√©ploiement simplifi√©');
  console.log('   ‚Ä¢ Compatible avec tout serveur web statique');
  console.log('\nüìä Donn√©es utilis√©es:');
  console.log('   ‚Ä¢ Source: temp/data/ (copi√©es vers web-interface/data/)');
  console.log('   ‚Ä¢ Format: Fichiers JSON statiques');
  console.log('   ‚Ä¢ Logos: Fichiers locaux + g√©n√©ration SVG');
  console.log('\nüëã Appuyez sur Ctrl+C pour arr√™ter');
});

// Gestion de l'arr√™t propre
process.on('SIGINT', () => {
  console.log('\nüëã Arr√™t du serveur...');
  server.close(() => {
    console.log('‚úÖ Serveur arr√™t√©');
    process.exit(0);
  });
});

// Gestion des erreurs
server.on('error', (err) => {
  console.error('‚ùå Erreur serveur:', err.message);
  if (err.code === 'EADDRINUSE') {
    console.error(`   Le port ${PORT} est d√©j√† utilis√©. Essayez un autre port avec:`);
    console.error(`   PORT=3005 node start-mayo-static.js`);
  }
});

process.on('uncaughtException', (err) => {
  console.error('‚ùå Erreur non g√©r√©e:', err.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e:', reason);
  process.exit(1);
});